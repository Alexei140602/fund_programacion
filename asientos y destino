#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NOMBRE 100
#define MAX_CORREO 100
#define MAX_TELEFONO 20
#define MAX_CONTRASEÑA 20
#define MAX_DESTINOS 5
#define MAX_ASIENTOS 40

typedef struct {
    char destino[MAX_NOMBRE];
    int asientos[MAX_ASIENTOS];
} Autobus;

// Prototipos de funciones
void inicializar_autobuses(Autobus autobuses[], int num_destinos);
void mostrar_destinos(Autobus autobuses[], int num_destinos);
void seleccionar_viaje(Autobus autobuses[], int num_destinos);
void reservar_asiento_detallado();
void registrar_usuario(char ***nombres, char ***correos, char ***telefonos, char ***contraseñas, int *num_usuarios);
int login(char **nombres, char **correos, char **contraseñas, int num_usuarios);
void liberar_memoria(char **nombres, char **correos, char **telefonos, char **contraseñas, int num_usuarios);

// Inicializar destinos y asientos de autobuses
void inicializar_autobuses(Autobus autobuses[], int num_destinos) {
    char *destinos[] = {"Chihuahua", "Cuernavaca", "Michoacán", "Nezahualcóyotl", "Ecatepec"};
    for (int i = 0; i < num_destinos; i++) {
        strcpy(autobuses[i].destino, destinos[i]);
        for (int j = 0; j < MAX_ASIENTOS; j++) {
            autobuses[i].asientos[j] = 0; // 0 indica que el asiento está disponible
        }
    }
}

// Mostrar destinos disponibles
void mostrar_destinos(Autobus autobuses[], int num_destinos) {
    printf("\nDESTINOS DISPONIBLES:\n");
    for (int i = 0; i < num_destinos; i++) {
        printf("%d. %s\n", i + 1, autobuses[i].destino);
    }
}

// Función para seleccionar transporte y reservar asiento
void seleccionar_viaje(Autobus autobuses[], int num_destinos) {
    int transporte;
    printf("Selecciona un tipo de transporte:\n");
    printf("1. Autobús turístico\n");
    printf("2. Autobús de carretera\n");
    printf("3. Vagonetas\n");
    scanf("%d", &transporte);
    getchar(); // Limpiar buffer

    switch (transporte) {
        case 1:
            printf("Has seleccionado autobús turístico.\n");
            reservar_asiento_detallado();
            break;
        case 2:
            printf("Has seleccionado autobús de carretera.\n");
            reservar_asiento_detallado();
            break;
        case 3:
            printf("Has seleccionado vagonetas.\n");
            reservar_asiento_detallado();
            break;
        default:
            printf("Opción no válida.\n");
    }
}

// Reservar asiento en detalle
void reservar_asiento_detallado() {
    int comprar = 0;
    int filas = 15, columnas = 4; // Configuración general
    int matriz[filas][columnas];

    // Inicializar matriz
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            matriz[i][j] = (i + 1) * 10 + (j + 1);
        }
    }

    do {
        printf("ASIENTOS DISPONIBLES:\n");
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                if (matriz[i][j] == 0) {
                    printf("XX\t");
                } else {
                    printf("%d\t", matriz[i][j]);
                }
            }
            printf("\n");
        }

        int fila, columna;
        printf("Selecciona la fila (1-%d): ", filas);
        scanf("%d", &fila);
        printf("Selecciona la columna (1-%d): ", columnas);
        scanf("%d", &columna);

        if (fila < 1 || fila > filas || columna < 1 || columna > columnas || matriz[fila - 1][columna - 1] == 0) {
            printf("Selección inválida. Intenta de nuevo.\n");
            continue;
        }

        printf("Reservaste el asiento %d.\n", matriz[fila - 1][columna - 1]);
        matriz[fila - 1][columna - 1] = 0; // Marcar asiento como ocupado

        printf("¿Quieres seguir reservando? (0 = Sí, 1 = No): ");
        scanf("%d", &comprar);
    } while (comprar == 0);

    printf("Gracias por usar el sistema de reserva.\n");
}

// Registro de usuarios
void registrar_usuario(char ***nombres, char ***correos, char ***telefonos, char ***contraseñas, int *num_usuarios) {
    char buffer[MAX_NOMBRE];

    *nombres = realloc(*nombres, (*num_usuarios + 1) * sizeof(char *));
    *correos = realloc(*correos, (*num_usuarios + 1) * sizeof(char *));
    *telefonos = realloc(*telefonos, (*num_usuarios + 1) * sizeof(char *));
    *contraseñas = realloc(*contraseñas, (*num_usuarios + 1) * sizeof(char *));

    printf("Nombre completo: ");
    fgets(buffer, MAX_NOMBRE, stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    (*nombres)[*num_usuarios] = strdup(buffer);

    printf("Correo electrónico: ");
    fgets(buffer, MAX_CORREO, stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    (*correos)[*num_usuarios] = strdup(buffer);

    printf("Teléfono: ");
    fgets(buffer, MAX_TELEFONO, stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    (*telefonos)[*num_usuarios] = strdup(buffer);

    printf("Contraseña: ");
    fgets(buffer, MAX_CONTRASEÑA, stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    (*contraseñas)[*num_usuarios] = strdup(buffer);

    (*num_usuarios)++;
    printf("Usuario registrado exitosamente.\n");
}

// Login de usuarios
int login(char **nombres, char **correos, char **contraseñas, int num_usuarios) {
    char correo[MAX_CORREO], contraseña[MAX_CONTRASEÑA];

    printf("Correo: ");
    fgets(correo, MAX_CORREO, stdin);
    correo[strcspn(correo, "\n")] = 0;

    printf("Contraseña: ");
    fgets(contraseña, MAX_CONTRASEÑA, stdin);
    contraseña[strcspn(contraseña, "\n")] = 0;

    for (int i = 0; i < num_usuarios; i++) {
        if (strcmp(correos[i], correo) == 0 && strcmp(contraseñas[i], contraseña) == 0) {
            printf("Bienvenido, %s.\n", nombres[i]);
            return 1;
        }
    }

    printf("Credenciales inválidas.\n");
    return 0;
}

// Liberar memoria
void liberar_memoria(char **nombres, char **correos, char **telefonos, char **contraseñas, int num_usuarios) {
    for (int i = 0; i < num_usuarios; i++) {
        free(nombres[i]);
        free(correos[i]);
        free(telefonos[i]);
        free(contraseñas[i]);
    }
    free(nombres);
    free(correos);
    free(telefonos);
    free(contraseñas);
}

// Main
int main() {
    char **nombres = NULL, **correos = NULL, **telefonos = NULL, **contraseñas = NULL;
    int num_usuarios = 0;
    int opcion;

    Autobus autobuses[MAX_DESTINOS];
    inicializar_autobuses(autobuses, MAX_DESTINOS);

    do {
        printf("\n1. Registrar usuario\n");
        printf("2. Iniciar sesión\n");
        printf("3. Salir\n");
        printf("Seleccione una opción: ");
        scanf("%d", &opcion);
        getchar();

        switch (opcion) {
            case 1:
                registrar_usuario(&nombres, &correos, &telefonos, &contraseñas, &num_usuarios);
                break;
            case 2:
                if (login(nombres, correos, contraseñas, num_usuarios)) {
                    seleccionar_viaje(autobuses, MAX_DESTINOS);
                }
                break;
            case 3:
                liberar_memoria(nombres, correos, telefonos, contraseñas, num_usuarios);
                printf("Gracias por usar el sistema.\n");
                break;
            default:
                printf("Opción no válida.\n");
        }
    } while (opcion != 3);

    return 0;
}


